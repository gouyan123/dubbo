重点：同一个JVM下，一个方法可以直接调用另一个方法；不同的JVM下，一个项目的方法通过RPC调用另一个项目的方法；
创建 2个maven项目 dubbo-provider，dubbo-consumer，已经是分布式开发了；
---------------------------创建dubbo-provider01-------------------------------------------
创建第 1个dubbo程序，暂时不使用注册中心registry，先创建 dubbo的maven项目，再创建dubbo-provider项目：
dubbo的pom.xml文件导入 dubbo包：
<dependency>
<groupId>com.alibaba</groupId>
<artifactId>dubbo</artifactId>
<version>${dubbo.version}</version>
<exclusions>
  <exclusion>
    <groupId>org.springframework</groupId>
    <artifactId>spring</artifactId>
  </exclusion>
</exclusions>
</dependency>
1、dubbo-provider就是向外提供方法，供dubbo-consumer调用，因此 provider中导入dubbo-api项目的接口方
法，方法如下：
package com.bjpowernode.dubbo;
public interface HelloService {
    public abstract String sayHello(String name);
}
首先将dubbo-api项目打包到maven仓库，然后dubbo-provider的pom.xml文件引入该包：
<dependency>
    <groupId>com.gouyan</groupId>
    <artifactId>dubbo-api</artifactId>
    <version>1.0-SNAPSHOT</version>
</dependency>
再创建其实现类 HelloServiceImpl
package com.bjpowernode.dubbo.impl;
public class HelloServiceImpl implements HelloService {
    @Override
    public String sayHello(String name) {
        return "Hello," + name;
    }
}
2、此时这个接口方法并不能被外部所使用，需要依赖dubbo将其发布出去，此处，只需要配置spring相关配置文件即可，
dubbo是一个spring的自定义标签，与spring无缝融合，定义sping总配置文件applicationContext.xml里面通过
<import resource=”classpath: applicationContext-dubbo-provider.xml”/>导入另一个spring配置文件
applicationContext.xml内容如下：
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns=..." />
    <import resource="applicationContext-dubbo-provider.xml" />
	<context:component-scan base-package="com.bjpowernode.dubbo.service" />
</beans>
applicationContext-dubbo-provider.xml内容如下：
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="..." />
    <dubbo:application name="dubbo-provider" />     用于区分各工程
    <bean id="helloService" class="com.bjpowernode.dubbo.service.impl.HelloServiceImpl"/>
	<dubbo:service interface="com.bjpowernode.dubbo.service.HelloService" ref="helloService" registry="N/A"/>
</beans>
3、通过main方法加载applicationContext.xml，再加载applicationContext-dubbo-provider.xml启动
dubbo，也可以通过Tomcat的监听器去加载applicationContext.xml实现启动；
创建 com.bjpowernode.bootstrap.Bootstrap类，启动spring容器；
public class Bootstrap {
    public static void main(String[] args) throws IOException {
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("classpath:applicationContext.xml");
        /*运行spring容器*/
        context.start();
        /*一直处于读的状态，避免容器关闭，避免消费者无法调用*/
        System.in.read();
    }
}
---------------------------创建dubbo-cosumer01---------------------------------------------
创建 applicationContext-dubbo-consumer.xml文件，引用dubbo-provider提供的接口方法
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="...">
	<!--工程名-->
	<dubbo:application name="dubbo-consumer"/>
	<!--引用远程服务-->
	<!--此处没有使用注册中心，使用的是dubbo协议-->
	<dubbo:reference id="helloService" interface="com.bjpowernode.dubbo.service.HelloService" url="dubbo://localhost:20880"/>
</beans>
创建 com.bjpowernode.bootstrap.Bootstrap类，启动spring容器
public class Bootstrap {
    public static void main(String[] args) throws IOException {
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("classpath:applicationContext.xml");
        /**获取远程provider的 helloService对象*/
        HelloService helloService = (HelloService) context.getBean("helloService");
        /**通过动态代理，将对象，方法名称，参数发送到provider端执行，然后将返回值传递回来*/
        String result = helloService.sayHello("小唐");
        System.out.println(result);
    }
}
---------------------------使用multicast注册中心--------------------------------------------
修改 applicationContext-dubbo-provider.xml文件：将服务注册到注册中心上；
将<dubbo:service interface="..." ref="..." registry="N/A"/>中的 registry="N/A"注释掉，并添加
注册中心，将方法注册到 registry上，代码如下：
<dubbo:registry address="multicast://224.2.3.4:1234"/>注册中心地址必填；

修改 applicationContext-dubbo-consumer.xml文件：从注册中找到服务；
添加 <dubbo:registry address="multicast://224.2.3.4:1234"/>注册中心；

运行provider端和consumer端的 main()方法；
---------------------------使用zookeeper注册中心--------------------------------------------
pom.xml文件导入 zookeeper相关开发包
<!--zookeeper开始-->
<dependency>
<groupId>org.apache.zookeeper</groupId>
<artifactId>zookeeper</artifactId>
<version>${zookeeper.version}</version>
<type>pom</type>
</dependency>
<dependency>
<groupId>com.101tec</groupId>
<artifactId>zkclient</artifactId>
<version>${zkclient.version}</version>
</dependency>
<!--zookeeper结束-->

修改 applicationContext-dubbo-provider.xml文件：
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="...">
    <!--服务名称-->
	<dubbo:application name="HelloProvider" />
	<!--provider将服务注册到zookeeper中，指定客户端连接服务端对象为zkclient-->
	<dubbo:registry address="zookeeper://47.100.49.95:2181" client="zkclient"/>

	<bean id="helloService" class="com.bjpowernode.dubbo.service.impl.HelloServiceImpl"/>
	<!--将服务注册到zookeepr的 dubbo/com.bjpowernode.dubbo.service.HelloService/providers
	目录下-->
	<dubbo:service interface="com.bjpowernode.dubbo.service.HelloService" ref="helloService"/>
</beans>

修改 applicationContext-dubbo-consumer.xml文件：
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="...">
	<!--工程名-->
	<dubbo:application name="dubbo-consumer"/>
	<!--去zookeeper注册中心取服务，client="zkclient"必须有-->
    <dubbo:registry address="zookeeper://47.100.49.95:2181"  client="zkclient"/>
	<!--引用远程服务的 helloService对象-->
	<!---->
	<dubbo:reference id="helloService" interface="com.bjpowernode.dubbo.service.HelloService"/>
</beans>

